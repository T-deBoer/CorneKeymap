/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        ComboESC {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        ComboN1 {
            bindings = <&kp N1>;
            key-positions = <1 13>;
        };

        ComboN2 {
            bindings = <&kp N2>;
            key-positions = <2 14>;
        };

        ComboN3 {
            bindings = <&kp N3>;
            key-positions = <3 15>;
        };

        ComboN4 {
            bindings = <&kp N4>;
            key-positions = <4 16>;
        };

        ComboN5 {
            bindings = <&kp N5>;
            key-positions = <5 17>;
        };

        ComboN6 {
            bindings = <&kp N6>;
            key-positions = <6 18>;
        };

        ComboN7 {
            bindings = <&kp N7>;
            key-positions = <7 19>;
        };

        ComboN8 {
            bindings = <&kp N8>;
            key-positions = <8 20>;
        };

        ComboN9 {
            bindings = <&kp N9>;
            key-positions = <9 21>;
        };

        ComboN0 {
            bindings = <&kp N0>;
            key-positions = <10 22>;
        };

        Combo+ {
            bindings = <&kp MINUS>;
            key-positions = <11 23>;
        };

        ComboGrTi {
            bindings = <&kp GRAVE>;
            key-positions = <13 25>;
        };

        ComboLPar {
            bindings = <&kp LS(N8)>;
            key-positions = <28 16>;
        };

        ComboLBrackBrace {
            bindings = <&kp RA(N8)>;
            key-positions = <17 29>;
        };

        ComboRBrackBrace {
            bindings = <&kp RA(N9)>;
            key-positions = <18 30>;
        };

        ComboRPar {
            bindings = <&kp LS(N9)>;
            key-positions = <19 31>;
        };

        ComboUndo {
            bindings = <&kp LC(Z)>;
            key-positions = <3 2>;
        };

        ComboRedo {
            bindings = <&kp LC(Y)>;
            key-positions = <3 4>;
        };

        ComboCopy {
            bindings = <&kp LC(C)>;
            key-positions = <3 14>;
        };

        ComboPaste {
            bindings = <&kp LC(V)>;
            key-positions = <3 16>;
        };

        ComboCut {
            bindings = <&kp LC(X)>;
            key-positions = <14 16>;
        };

        ComboSave {
            bindings = <&kp LC(S)>;
            key-positions = <15 28>;
        };

        ComboChevron {
            bindings = <&kp LS(NON_US_BSLH)>;
            key-positions = <4 17>;
        };

        ComboLChevron {
            bindings = <&kp NON_US_BSLH>;
            key-positions = <7 18>;
        };

        ComboDQuotes {
            bindings = <&kp LS(N2)>;
            key-positions = <4 5>;
        };

        ComboLEnter {
            bindings = <&kp KP_ENTER>;
            key-positions = <16 17>;
        };

        ComboREnter {
            bindings = <&kp KP_ENTER>;
            key-positions = <18 19>;
        };

        ComboSelAll {
            bindings = <&kp LC(A)>;
            key-positions = <2 4>;
        };

        ComboBackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 19>;
        };

        ComboBackWord {
            bindings = <&MacroDelWord>;
            key-positions = <19 20 21>;
        };

        ComboDel {
            bindings = <&kp DEL>;
            key-positions = <21 22>;
        };

        ComboDelWord {
            bindings = <&kp LC(DEL)>;
            key-positions = <21 22 23>;
        };

        ComboLeft {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <31 32>;
        };

        ComboRight {
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <32 33>;
        };

        ComboLWord {
            bindings = <&kp LC(LEFT_ARROW)>;
            key-positions = <30 31 32>;
        };

        ComboRWord {
            bindings = <&kp LC(RIGHT_ARROW)>;
            key-positions = <31 32 33>;
        };

        ComboUp {
            bindings = <&kp UP_ARROW>;
            key-positions = <31 20>;
        };

        ComboDown {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <20 33>;
        };

        ComboHome {
            bindings = <&kp HOME>;
            key-positions = <8 9>;
        };

        ComboEnd {
            bindings = <&kp END>;
            key-positions = <9 10>;
        };

        ComboPGUP {
            bindings = <&kp PAGE_UP>;
            key-positions = <9 20>;
        };

        ComboPGDN {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <9 22>;
        };

        ComboBackslagPipe {
            bindings = <&kp LS(N7)>;
            key-positions = <30 19>;
        };

        ComboBackslash {
            bindings = <&MacroBackslash>;
            key-positions = <16 29>;
        };

        ComboSCUP {
            bindings = <&msc SCRL_UP>;
            key-positions = <8 10>;
        };

        ComboSCDN {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <20 22>;
        };

        ComboSCLF {
            bindings = <&msc SCRL_LEFT>;
            key-positions = <7 9>;
        };

        ComboSCRG {
            bindings = <&msc SCRL_RIGHT>;
            key-positions = <9 11>;
        };

        ComboLine {
            bindings = <&kp SLASH>;
            key-positions = <34 35>;
        };

        ComboAposAst {
            bindings = <&kp APOS>;
            key-positions = <22 23>;
        };

        ComboAccent {
            bindings = <&kp EQUAL>;
            key-positions = <10 11>;
        };

        ComboRL01 {
            bindings = <&mo 1>;
            key-positions = <40 41>;
        };

        ComboLL01 {
            bindings = <&mo 1>;
            key-positions = <37 36>;
        };

        ComboL02 {
            bindings = <&mo 2>;
            key-positions = <40 39>;
        };

        ComboL03 {
            bindings = <&mo 3>;
            key-positions = <38 37>;
        };

        ComboExcl {
            bindings = <&kp LS(N1)>;
            key-positions = <7 8 21>;
        };

        ComboQMark {
            bindings = <&kp LS(MINUS)>;
            key-positions = <8 9 19>;
        };

        ComboAT {
            bindings = <&MacroAT>;
            key-positions = <13 16>;
        };

        ComboRBrace {
            bindings = <&MacroRCBrack>;
            key-positions = <20 32>;
        };

        ComboLBrace {
            bindings = <&kp RA(N7)>;
            key-positions = <15 27>;
        };

        Combo_Umlaut {
            bindings = <&kp RBKT>;
            key-positions = <11 22>;
        };
    };

    ComboAT {
        bindings = <&kp AT>;
        key-positions = <13 16>;
    };

    macros {
        MacroSelLine: MacroSelLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "MACROSELLINE";
        };

        MacroBackslash: MacroBackslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSLH>;
            label = "MACROBACKSLASH";
        };

        MacroAT: MacroAT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp AT>;
            label = "MACROAT";
        };

        MacroDelWord: MacroDelWord {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(BACKSPACE)>;
            label = "MACRODELWORD";
        };

        MacroRCBrack: MacroRCBrack {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RBRC>;
            label = "MACRORCBRACK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        L00_Base {
            display-name = "00_Base";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp F     &kp P     &kp B        &kp J      &kp L     &kp U      &kp Y    &kp LBKT  &kp SEMI
&kp LCTRL  &kp A  &kp R  &kp S     &kp T     &kp G        &kp M      &kp N     &kp E      &kp I    &kp O     &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp D     &kp V        &kp K      &kp H     &kp COMMA  &kp DOT  &kp FSLH  &mo 4
                         &kp LGUI  &kp LALT  &kp SPACE    &kp SPACE  &kp RALT  &kp RCTRL
            >;
        };

        L01_NumFunc {
            display-name = "L01_NumFunc";
            bindings = <
&trans  &kp F1    &kp F2    &kp F3    &kp F4    &kp F5       &none      &kp N7    &kp N8     &kp N9  &none  &trans
&trans  &kp F6    &kp F7    &kp F8    &kp F9    &kp F10      &none      &kp N4    &kp N5     &kp N6  &none  &none
&trans  &kp LGUI  &kp LALT  &kp F11   &kp F12   &none        &kp N0     &kp N1    &kp N2     &kp N3  &none  &trans
                            &kp LGUI  &kp LALT  &kp SPACE    &kp SPACE  &kp RALT  &kp RCTRL
            >;
        };

        L02_Mouse {
            bindings = <
&trans  &trans  &trans          &mmv MOVE_UP    &trans           &trans    &trans  &trans  &trans     &trans     &trans     &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans    &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans
&trans  &trans  &trans          &trans          &trans           &trans    &trans  &trans  &trans     &trans     &trans     &trans
                                &trans          &trans           &trans    &trans  &trans  &trans
            >;

            label = "L02_Mouse";
        };

        L03_Connection {
            bindings = <
&bt BT_CLR  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;

            label = "L03_Connection";
        };

        L04_Test {
            bindings = <
&kp SEMI         &kp APOS         &kp BSLH              &kp COMMA  &kp DOT              &kp FSLH    &kp GRAVE  &trans  &trans  &trans  &trans  &trans
&kp NON_US_HASH  &kp NON_US_BSLH  &kp NON_US_BACKSLASH  &kp INT7   &kp INTERNATIONAL_8  &trans      &trans     &trans  &trans  &trans  &trans  &trans
&trans           &trans           &trans                &trans     &trans               &trans      &trans     &trans  &trans  &trans  &trans  &trans
                                                        &trans     &trans               &trans      &trans     &trans  &trans
            >;
        };
    };
};
